        lw      0       1       mcand       # $1 = mcand
        lw      0       2       mplier      # $2 = mplier
multi   lw      0       4       zero        # $4 = 0
        lw      0       6       pos1        # Load the value of pos1 (1) into register $6
        beq     4       6       done        # If $4 == $6 (1), jump to the done label to halt the program
        lw      0       6       one         # Load the value of one (1) into register $6
        add     6       4       4           # Increment $4 by 1
        sw      0       4       zero        # Store the incremented value of $4 in zero (local variable)
        lw      0       4       pos1        # Load pos1 into $4
        nand    1       4       6           # NAND operation between $1 and $4, result in $6
        nand    6       6       6           # Double NAND for AND operation equivalent
        add     4       4       4           # Shift left the bits in $4
        sw      0       4       pos1        # Store the updated pos1 value
        beq     6       0       multi       # If $6 == 0, continue the loop
        add     2       3       3           # Add $2 (mplier) to itself, result in $3
        add     2       2       2           # Shift left the value in $2
done    halt                                # Halt the program
mcand   .fill   32766
mplier  .fill   10383
pos1    .fill   1
zero    .fill   0
one     .fill   1