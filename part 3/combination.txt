        lw          0           1           n        # Load n into $1
        lw          0           2           r        # Load r into $2
        lw          0           7           stack    # Initialize stack pointer
        lw          0           5           combAdr  # Prepare to call combination subroutine
        jalr        5           6                    # Call combination function
        halt                                         # End of program

# combination(n, r)
combination  
        sw          7           6           stack    # Save return address on stack
        add         7           1           7        # Increment stack pointer
        sw          7           1           stack    # Save $1 (n) on stack
        add         7           1           7        # Increment stack pointer
        sw          7           2           stack    # Save $2 (r) on stack
        add         7           1           7        # Increment stack pointer

        beq         2           0           baseCase1 # if r == 0, return 1
        beq         1           2           baseCase1 # if n == r, return 1

        lw          0           4           neg1     # Prepare for n-1
        add         1           4           1        # n = n - 1
        jalr        5           6                    # Call combination(n-1, r)

        lw          7           2           stack    # Restore $2 (r)
        lw          0           4           neg1     # Prepare for r-1
        add         1           4           1        # n = n - 1
        add         2           4           2        # r = r - 1
        jalr        5           6                    # Call combination(n-1, r-1)

        add         3           4           3        # Add the results of the two recursive calls
        j           done

baseCase1 
        add         0           4           3        # return 1
        j           done

done    
        lw          7           2           stack    # Restore $2 (r) from stack
        lw          7           1           stack    # Restore $1 (n) from stack
        lw          7           6           stack    # Restore return address from stack
        jalr        6           0                    # Return from subroutine

# Data Section
n        .fill        7          # Example n = 7
r        .fill        3          # Example r = 3
one      .fill        1
neg1     .fill        -1
combAdr  .fill        combination  # Address of combination subroutine
stack    .fill        0           # Stack start (initially empty)
