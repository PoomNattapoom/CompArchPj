

        lw          0           1           mpcand   # Load multiplicand into $1
        lw          0           2           mplier     # Load multiplier into $2
        lw          0           3           result         # Initialize result (0) into $3
        lw          0           7           stack          # Initialize stack pointer
        lw          0           5           mulAd    # Prepare to call multiply subroutine
        jalr        5           6                          # Call multiply function
        halt                                               # End of program
mulply  sw          7           6           stack          # Save return address on stack
        add         7           1           7              # Increment stack pointer (simulated)
        sw          7           1           stack          # Save $1 (multiplicand) on stack
        add         7           1           7              # Increment stack pointer
        sw          7           2           stack          # Save $2 (multiplier) on stack
        add         7           1           7              # Increment stack pointer
mploop  and         4           2           1              # Check LSB of multiplier (multiplier & 1)
        beq         4           0           skadd       # If LSB is 0, skip addition

        add         3           3           1              # Add multiplicand to result

skadd   add         1           1           1              # Double multiplicand (shift left by adding itself)
        
        lw          0           4           neg1           # Load neg1 into register for subtraction
        add         2           2           4              # Decrement multiplier (simulate shift right)
        
        beq         2           0           done           # If multiplier == 0, end loop
        beq         0           0           mploop  # Continue loop (equivalent to unconditional jump)

done        lw          7           2       stack          # Restore $2 (multiplier) from stack
        lw          7           1           stack          # Restore $1 (multiplicand) from stack
        lw          7           6           stack          # Restore return address from stack
        jalr        6           0                          # Return from subroutine


mpcand  .fill        7                   # Example multiplicand = 7
mplier    .fill        3                   # Example multiplier = 3
result        .fill        0                   # Initialize result to 0
neg1          .fill        -1                  # For decrementing the multiplier
stack         .fill        0                   # Stack start (initially empty)
mulAd   .fill        mulply            # Address of multiply subroutin